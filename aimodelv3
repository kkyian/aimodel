import tkinter as tk
from tkinter import ttk, scrolledtext, filedialog
from transformers import BlenderbotTokenizer, BlenderbotForConditionalGeneration
import torch
import threading
import json

# Set device
device = "cuda" if torch.cuda.is_available() else "cpu"

# Load Blenderbot model and tokenizer
model_name = "facebook/blenderbot-400M-distill"
tokenizer = BlenderbotTokenizer.from_pretrained(model_name)
model = BlenderbotForConditionalGeneration.from_pretrained(model_name).to(device)

class AIMODELAppV2:
    def __init__(self, root):
        self.root = root
        self.root.title("AIMODEL Chat App V3")

        self.max_length = 256
        self.temperature = 0.7
        self.top_p = 0.95

        self.paned = ttk.PanedWindow(root, orient=tk.HORIZONTAL)
        self.paned.pack(fill="both", expand=True)

        self.frame_history = ttk.Frame(self.paned, width=200, relief="sunken")
        self.paned.add(self.frame_history, weight=1)
        self.history_listbox = tk.Listbox(self.frame_history)
        self.history_listbox.pack(fill="both", expand=True)

        self.frame_chat = ttk.Frame(self.paned, padding="10")
        self.paned.add(self.frame_chat, weight=3)
        self.chat_display = scrolledtext.ScrolledText(self.frame_chat, wrap=tk.WORD, width=60, height=20, state="disabled")
        self.chat_display.grid(row=0, column=0, columnspan=4, pady=5)

        self.chat_entry = ttk.Entry(self.frame_chat, width=50)
        self.chat_entry.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=5)
        self.chat_entry.insert(0, "Hello!")
        self.chat_entry.bind("<Return>", lambda event: self.send_message())

        self.send_button = ttk.Button(self.frame_chat, text="Send", command=self.send_message)
        self.send_button.grid(row=1, column=1, padx=5, pady=5)

        self.settings_button = ttk.Button(self.frame_chat, text="Settings", command=self.open_settings)
        self.settings_button.grid(row=1, column=2, padx=5, pady=5)

        self.clear_button = ttk.Button(self.frame_chat, text="Clear", command=self.clear_chat)
        self.clear_button.grid(row=1, column=3, padx=5, pady=5)

        self.save_button = ttk.Button(self.frame_chat, text="Save", command=self.save_conversation)
        self.save_button.grid(row=3, column=0, pady=5)

        self.load_button = ttk.Button(self.frame_chat, text="Load", command=self.load_conversation)
        self.load_button.grid(row=3, column=1, pady=5)

        self.status_label = ttk.Label(self.frame_chat, text="Ready")
        self.status_label.grid(row=2, column=0, columnspan=4, sticky=tk.W)

        self.conversation_history = []

    def save_conversation(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON files", "*.json")])
        if file_path:
            with open(file_path, "w") as f:
                json.dump(self.conversation_history, f)
            self.status_label.config(text="Conversation saved.")

    def load_conversation(self):
        file_path = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
        if file_path:
            with open(file_path, "r") as f:
                self.conversation_history = json.load(f)
            self.chat_display.config(state="normal")
            self.chat_display.delete('1.0', tk.END)
            for line in self.conversation_history:
                speaker, message = line.split(": ", 1)
                self.chat_display.insert(tk.END, f"{speaker}: {message}\n")
            self.chat_display.config(state="disabled")
            self.update_history_bar()
            self.status_label.config(text="Conversation loaded.")

    def update_history_bar(self):
        self.history_listbox.delete(0, tk.END)
        for line in self.conversation_history:
            self.history_listbox.insert(tk.END, line)

    def append_chat_display(self, speaker, message):
        self.chat_display.config(state="normal")
        self.chat_display.insert(tk.END, f"{speaker}: {message}\n")
        self.chat_display.config(state="disabled")
        self.chat_display.yview(tk.END)

    def clear_chat(self):
        self.conversation_history.clear()
        self.chat_display.config(state="normal")
        self.chat_display.delete('1.0', tk.END)
        self.chat_display.config(state="disabled")
        self.update_history_bar()
        self.status_label.config(text="Chat cleared.")

    def send_message(self):
        user_msg = self.chat_entry.get().strip()
        if not user_msg:
            return

        self.append_chat_display("User", user_msg)
        self.conversation_history.append(f"User: {user_msg}")
        self.chat_entry.delete(0, tk.END)
        self.status_label.config(text="Bot is typing...")

        threading.Thread(target=self.generate_response, args=(user_msg,), daemon=True).start()

    def generate_response(self, user_msg):
        try:
            context = self.conversation_history[-6:]  # Last 3 turns
            prompt = "\n".join(context) + "\nBot:"
            inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512).to(device)

            reply_ids = model.generate(
                **inputs,
                max_length=self.max_length,
                do_sample=True,
                temperature=self.temperature,
                top_p=self.top_p,
            )

            generated_text = tokenizer.decode(reply_ids[0], skip_special_tokens=True)
            bot_response = generated_text.replace(prompt, '').strip()
            if not bot_response:
                bot_response = "I'm not sure."

        except Exception as e:
            bot_response = f"[Error generating response: {str(e)}]"

        self.root.after(0, self.display_bot_response, bot_response)

    def display_bot_response(self, response):
        self.append_chat_display("Bot", response)
        self.conversation_history.append(f"Bot: {response}")
        self.update_history_bar()
        self.status_label.config(text="Ready")

    def open_settings(self):
        settings_win = tk.Toplevel(self.root)
        settings_win.title("Settings")

        ttk.Label(settings_win, text="Max Length:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.E)
        max_length_var = tk.StringVar(value=str(self.max_length))
        max_length_entry = ttk.Entry(settings_win, textvariable=max_length_var)
        max_length_entry.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(settings_win, text="Temperature:").grid(row=1, column=0, padx=5, pady=5, sticky=tk.E)
        temperature_var = tk.StringVar(value=str(self.temperature))
        temperature_entry = ttk.Entry(settings_win, textvariable=temperature_var)
        temperature_entry.grid(row=1, column=1, padx=5, pady=5)

        ttk.Label(settings_win, text="Top p:").grid(row=2, column=0, padx=5, pady=5, sticky=tk.E)
        top_p_var = tk.StringVar(value=str(self.top_p))
        top_p_entry = ttk.Entry(settings_win, textvariable=top_p_var)
        top_p_entry.grid(row=2, column=1, padx=5, pady=5)

        def save_settings():
            try:
                self.max_length = int(max_length_var.get())
                self.temperature = float(temperature_var.get())
                self.top_p = float(top_p_var.get())
                self.status_label.config(text="Settings updated.")
            except ValueError:
                self.status_label.config(text="Invalid settings input.")
            settings_win.destroy()

        save_button = ttk.Button(settings_win, text="Save", command=save_settings)
        save_button.grid(row=3, column=0, columnspan=2, pady=10)

if __name__ == "__main__":
    root = tk.Tk()
    app = AIMODELAppV2(root)
    root.mainloop()
